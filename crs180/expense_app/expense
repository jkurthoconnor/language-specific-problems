#! /usr/bin/env ruby
# require 'pry'
require 'pg'

class CLI
  def initialize(args)
    @args = args
    @app = ExpenseData.new
  end

  def run
    case @args[0]
    when 'list' then @app.list_expenses
    when 'add'
      abort 'You must provide amount and memo.' unless valid_add_input?
      @app.add_expense(@args[1, 2])
    when 'search' then @app.search(@args[1])
    when 'delete' then @app.delete(@args[1])
    else @app.help
    end
  end

  def valid_add_input?
    !(@args[1] =~ /[^0-9.]/ || @args[2] =~ /[^\w ]/)
  end
end

class ExpenseData
  def initialize
    @db = PG.connect(dbname: 'expenses')
  end

  def list_expenses
    result = @db.exec('SELECT id, created_on, amount, memo FROM expenses;')

    display(result)
  end

  def add_expense(args)
    amount, memo = args[0], args[1]
    sql = 'INSERT INTO expenses (amount, memo) VALUES ($1, $2);'

    @db.exec_params(sql, [amount, memo])

    puts "Expense added: #{amount} for #{memo}."
  end
  
  def search(term)
    sql = 'SELECT * FROM expenses WHERE memo ~* $1;'
    result = @db.exec_params(sql, [term])

    display(result)
  end
  
  def display(result_obj)
    result_obj.each do |tuple|
      columns = [tuple['id'].rjust(4),
                 tuple['created_on'],
                 tuple['amount'].rjust(15),
                 tuple['memo']]
      puts columns.join(' | ')
    end
  end

  def delete(expense_id)
    result = @db.exec_params("SELECT * FROM expenses WHERE id=#{expense_id};")

    if result.ntuples.zero?
      puts "There is no expense with id #{expense_id}"
    else
      sql = 'DELETE FROM expenses WHERE id=$1;'
      @db.exec_params(sql, [expense_id])

      puts "The following expense has been deleted:"
      display(result)
    end
  end

  def help
    puts <<~HEREDOC

              An expense recording system

              Commands:

              add AMOUNT MEMO [DATE] - record a new expense
              clear - delete all expenses
              list - list all expenses
              delete NUMBER - remove expense with id NUMBER
              search QUERY - list expenses with a matching memo field

        HEREDOC
  end
end

CLI.new(ARGV).run
